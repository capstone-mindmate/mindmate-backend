plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.mindmate'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Core
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Database
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'mysql:mysql-connector-java:8.0.33'

	// Cache & Message Queue
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.kafka:spring-kafka'

	// Security & OAuth2 & JWT
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	implementation 'org.jsoup:jsoup:1.17.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	// WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// Mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// Docs
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.google.guava:guava:23.0'

	// firebase
	implementation 'com.google.firebase:firebase-admin:9.1.1'

	// webp 이미지 처리
	implementation files('libs/webp-imageio-core-0.1.3.jar')
	implementation "com.sksamuel.scrimage:scrimage-core:4.0.32"
	implementation "com.sksamuel.scrimage:scrimage-webp:4.0.32"

	implementation 'org.threeten:threeten-extra:1.7.2'

	// Resilience4j 의존성
	implementation 'io.github.resilience4j:resilience4j-spring-boot2:1.7.0'
	implementation 'io.github.resilience4j:resilience4j-circuitbreaker:1.7.0'
	implementation 'io.github.resilience4j:resilience4j-timelimiter:1.7.0'
}

// JaCoCo 설정 추가
jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/dto/**",
					"**/entity/**"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}
			excludes = [
					'**/dto/**',
					'**/entity/**'
			]
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}